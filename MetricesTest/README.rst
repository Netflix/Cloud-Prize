Astyanax with additional metrics and reporting
-----------------------------------------------
Some of the popular Cassandra Java Clients are Hector, Astyanax and Java driver. The industry is moving towards CQL3 and
Datastax Java Driver is the only client driver supporting it as of now. Hector, Astyanax and Java Driver all support Thrift.
This is an effort to provide more functionality to astyanax by including some server side metrics to the Astyanax client.

Brief Comparison of Astyanax wrt the Java Driver
------------------------------------------------

In addition to supporting CQL3 Java driver has a multitude of features which the Astyanax driver does not provide as of now.
Here is a brief overview.

* Asynchronous: Astyanax uses thrift protocol which does not support asynchronous capabilities
  unlike binary protocol of java driver. Binary protocol needs to maintain a relatively low number
  of connections per node open to achieve good performance.

* Cassandra Query Tracing : Query tracing is not implemented in astyanax. which can be 
  easily implemented if we can get access to the sessions and events table in system_trace
  keyspaces inside cassandra. Simple CQL statements like the ones mentioned below should give
  access to Query tracing.
  
  select * from system_trace.sessions where session_id="Random UUID per query";
  select * from system_trace.events where session_id="Random UUID per query";  
  
* Load balancing policy : Astyanax supports a configurable load balancing policy where can
  implement Round robin policy (by default), Token aware routing (token range needs to 
  be provided through Priam and Eureka) but does not support Data-center aware load balancing
  (local data-center nodes to be provided, which will discover remote data-center using gossip
  protocol ).  
 
* Reconnection policies : If there is any connection error i.e  due to time out exception, or
  the Node is down due to DC issues, in such situation java driver provides retry after a constant
  time and exponential back off strategy (increase the retrying time exponentially ).
  This feature is not supported by astyanax yet.
  
* Retry Policies : Astyanax does not support retry policy unlike java driver which supports a
  default retry policy (never retry with different consistency level ), downgrading consistency 
  retry policy (keeps on decreasing the consistency level upto a certain level), Fallthrough
  retry policy (rethrow the exception) and logging retry policy (parent policy for other policies
  which also provides logging).
 
* Metrics and Reporting : Metrics and reporting can be implemented using Metrics library which are
  exposed through JMX . These metrics might be useful for reporting and debugging purposes in a production
  environment (metrics can be exposed using csv reporter, console reporter, slf4jreporter)



Feature Implemented : Astyanax Metrics and Reporting with JMX reporter 
----------------------------------------------------------------------
-> Connection class is used for making connection to cassandra host using astyanax.
->ConnectionPoolConfigurationMetrics implemented to hold value returned by gauge inside Metric Registry from ConnectionPoolConfiguration 
->ConnectionPoolMonitorMetrics implemented to hold value returned by gauge inside Metric Registry from ConnectionPoolMonitor
->ConnectionPoolConfigurationReport implemented to get value from registry provided by onnectionPoolConfigurationMetrics and exposed 
 it via JMXreporter
->ConnectionPoolMonitorReport implemented to get value from registry provided by onnectionPoolMonitorMetrics and exposed 
 it via JMXreporter


	    
Samples Metrics Output
----------------------

All the CSV reporter files which contain various metrices can be found in src/main/resources folder.

* ConnectionPoolConfigurationReport contains all the csv files contains metrics generated by ConnectionPoolConfiguration.

* ConnectionPoolMonitorReport contains all the csv files contains metrics generated by ConnectionPoolMonitor.


Samples output generated by console reporter
--------------------------------------------

LatencyAwareWindowSize:  value = 100

LocalDatacenter:         value = null

OperationSuccessCount:   value = 0

MaxBlockedThreadsPerHost:value = 25

MaxConnInPool:           value = 1

OperationTimeoutCount:   value = 0

MaxConnPerHost:          value = 1

PoolExhaustedTimeoutCount:value = 0

MaxFailoverCount:        value = -1

SocketTimeoutCount:      value = 0

MaxOperationsPerConnection:   value = 10000

UnknownErrorCount:       value = 0

MaxPendingConnectionsPerHost: value = 5

getConnectionCreateFailedCount: value = 0

MaxTimeoutCount:         value = 3

getConnectionCreatedCount:      value = 0

MaxTimeoutWhenExhausted: value = 2000

notFoundCount:           value = 0

MinHostInPoolRatio:      value = 0.65

requests:
---------
PortNumber:         value = 9160

RetryDelaySlice:    value = 1000

RetryMaxDelaySlice: value = 10

RetrySuspendWindow: value = 20000

SeedHosts:          value = [ec2-54-227-122-226.compute-1.amazonaws.com(54.227.122.226):9160]

Seeds:              value = ec2-54-227-122-226.compute-1.amazonaws.com

SocketConnectTimeOut:     value = 2000

SocketReadWriteTimeout:   value = 11000

TimeoutWindow:      value = 10000


Code Description
----------------

* Metrics is a toolkit available at "http://metrics.codahale.com/"

Add Maven dependency:
---------------------
<dependencies>
    <dependency>
        <groupId>com.codahale.metrics</groupId>
        <artifactId>metrics-core</artifactId>
        <version>${metrics.version}</version>
    </dependency>
</dependencies>

* Central point for metrics is Metric Registry which is collection for all the metrics inside application.

* Gauges are used to expose values returned by application .A gauge is a simplest metric type which will store 
  value returned by application. Value returned by gauge is stored inside Metric registry

* JMX reporter uses metric registry to expose metrics via different methods i.e. csv reporter,
  console reporter and slf4jreporter. 

Metrics library is used to monitor all the configuration details provided by connection pool monitor and connection
pool configuration . Gauge is used to store values returned by connection pool monitor and connection pool configuration
so that it can be stored inside metric registry. This metric registry is being used by JMX reporter to expose metrics via
Console reporter and CSV reporter. 

-> Slf4j reporter can also be implemented using following line of code.

/*
final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)
                                            .outputTo(LoggerFactory.getLogger("com.zscaler.cassandra.astyanax.metrics"))
                                            .convertRatesTo(TimeUnit.SECONDS)
                                            .convertDurationsTo(TimeUnit.MILLISECONDS)
                                            .build();
reporter.start(1, TimeUnit.MINUTES);
  
*/



* Connection class is used for making connection to cassandra host using astyanax.
* ConnectionPoolConfigurationMetrics implemented to hold value returned by gauge inside Metric Registry
  from ConnectionPoolConfiguration 
* ConnectionPoolMonitorMetrics implemented to hold value returned by gauge inside Metric Registry from 
  ConnectionPoolMonitor
* ConnectionPoolConfigurationReport implemented to get value from registry provided by ConnectionPoolConfigurationMetrics
  and exposed it via JMXreporter
* ConnectionPoolMonitorReport implemented to get value from registry provided by onnectionPoolMonitorMetrics and exposed 
  it via JMXreporter
  
  

Store gauge value in Metric registry 
--------------------------------------------

 private final MetricsRegistry registry = new MetricsRegistry();
	
		
	 
	 AstyanaxContext<Keyspace> context=Connection.start(input host address to make connection with astyanax i.e. localhost, amazon aws);
	 private final Gauge<Integer> PortNumber = registry.newGauge(ConnectionPoolConfigurationMetrics.class, "PortNumber", new Gauge<Integer>() {
	        @Override
	        public Integer value() {
	            return  contextcpcm.getConnectionPoolConfiguration().getPort();
	        }
	    });

Exposed Metrics using JMX reporter (Console)
---------------------------------------------- 

 MetricsRegistry registry=new ConnectionPoolMetrics().getRegistry();  
		 JmxReporter jmxReportermonit = new JmxReporter(registry);
		 jmxReportermonit.start();
		 
		 
	// used to display results on console	 
		 com.yammer.metrics.reporting.ConsoleReporter.enable(registry, 1, TimeUnit.SECONDS);	    
	    
	    
Exposed Metrics using JMX reporter (CSV reporter)
---------------------------------------------- 

 MetricsRegistry registry=new ConnectionPoolMetrics().getRegistry();  
		 JmxReporter jmxReportermonit = new JmxReporter(registry);
		 jmxReportermonit.start();
		 
		 
	// used to display results on console	 
		 com.yammer.metrics.reporting.CsvReporter.enable(registry, new File(file output destination), 1, TimeUnit.SECONDS);    
	    


Exposed Metrics using JMX reporter (Slf4j reporter)
---------------------------------------------- 

 MetricsRegistry registry=new ConnectionPoolMetrics().getRegistry();  
		 JmxReporter jmxReportermonit = new JmxReporter(registry);
		 jmxReportermonit.start();
		 
		 
	// used to display results on console	 
		 com.yammer.metrics.reporting.Slf4jReporter.enable(registry, class name, 1, TimeUnit.SECONDS);  





 
 
  
 
   
